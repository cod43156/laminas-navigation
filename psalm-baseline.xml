<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.18.0@b113f3ed0259fd6e212d87c3df80eec95a6abf19">
  <file src="src/AbstractContainer.php">
    <DocblockTypeContradiction>
      <code><![CDATA[! is_array($page) && ! $page instanceof Traversable]]></code>
      <code><![CDATA[! is_array($pages) && ! $pages instanceof Traversable]]></code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>TPage|null</code>
    </ImplementedReturnTypeMismatch>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->pages]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->findAllBy($property, $value)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>TPage|null</code>
    </InvalidReturnType>
    <MixedArgument>
      <code>$page</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$page</code>
      <code>$page</code>
      <code>$propertyValue</code>
      <code>$propertyValue</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>TPage|null</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>get</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code>$page</code>
      <code>$page</code>
    </MixedReturnStatement>
    <PossiblyInvalidArgument>
      <code>$page</code>
    </PossiblyInvalidArgument>
    <UnusedFunctionCall>
      <code>current</code>
    </UnusedFunctionCall>
  </file>
  <file src="src/ConfigProvider.php">
    <UndefinedClass>
      <code>\Zend\Navigation\Navigation</code>
    </UndefinedClass>
  </file>
  <file src="src/Navigation.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$pages && (! is_array($pages) && ! $pages instanceof Traversable)]]></code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/Page/AbstractPage.php">
    <DocblockTypeContradiction>
      <code>! is_string($property)</code>
      <code>! is_string($property)</code>
      <code>is_array($options)</code>
      <code>is_array($relations)</code>
      <code>is_array($relations)</code>
      <code><![CDATA[null !== $class && ! is_string($class)]]></code>
      <code><![CDATA[null !== $fragment && ! is_string($fragment)]]></code>
      <code><![CDATA[null !== $id && ! is_string($id) && ! is_numeric($id)]]></code>
      <code><![CDATA[null !== $label && ! is_string($label)]]></code>
      <code><![CDATA[null !== $target && ! is_string($target)]]></code>
      <code><![CDATA[null !== $title && ! is_string($title)]]></code>
    </DocblockTypeContradiction>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <InvalidToString>
      <code>string</code>
    </InvalidToString>
    <LessSpecificImplementedReturnType>
      <code><![CDATA[array{
     *     label: string|null,
     *     fragment: string|null,
     *     id: string|null,
     *     class: string|null,
     *     title: string|null,
     *     target: string|null,
     *     rel: array|null,
     *     rev: array|null,
     *     order: int|null,
     *     resource: ResourceInterface|string|null,
     *     privilege: string|null,
     *     permission: mixed|null,
     *     active: bool,
     *     visible: bool,
     *     pages: list<array>,
     *     ...
     * }]]></code>
    </LessSpecificImplementedReturnType>
    <MissingReturnType>
      <code>addFactory</code>
    </MissingReturnType>
    <MixedArgumentTypeCoercion>
      <code>$key</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$factoryCallBack</code>
      <code>$name</code>
      <code>$name</code>
      <code>$page</code>
      <code>$relation</code>
      <code>$relation</code>
      <code>$type</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>call_user_func($factoryCallBack, $options)</code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>AbstractPage</code>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>new $type($options)</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code>$page</code>
      <code><![CDATA[$this->rel[$relation] ?? null]]></code>
      <code><![CDATA[$this->rel[$relation] ?? null]]></code>
      <code><![CDATA[$this->rev[$relation] ??
                null]]></code>
      <code><![CDATA[$this->rev[$relation] ??
                null]]></code>
    </MixedReturnStatement>
    <NullableReturnStatement>
      <code><![CDATA[$this->label]]></code>
      <code><![CDATA[$this->label]]></code>
      <code><![CDATA[$this->rel[$relation] ?? null]]></code>
      <code><![CDATA[$this->rev[$relation] ??
                null]]></code>
    </NullableReturnStatement>
    <PropertyNotSetInConstructor>
      <code>$textDomain</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $active</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>is_string($relation)</code>
      <code>is_string($relation)</code>
      <code>null !== $fragment</code>
      <code>null !== $label</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Page/Mvc.php">
    <DocblockTypeContradiction>
      <code>! is_string($route)</code>
      <code><![CDATA[null !== $action && ! is_string($action)]]></code>
      <code><![CDATA[null !== $controller && ! is_string($controller)]]></code>
      <code>null === $router</code>
    </DocblockTypeContradiction>
    <LessSpecificImplementedReturnType>
      <code><![CDATA[array{
     *     label: string|null,
     *     fragment: string|null,
     *     id: string|null,
     *     class: string|null,
     *     title: string|null,
     *     target: string|null,
     *     rel: array|null,
     *     rev: array|null,
     *     order: int|null,
     *     resource: ResourceInterface|string|null,
     *     privilege: string|null,
     *     permission: mixed|null,
     *     active: bool,
     *     visible: bool,
     *     pages: list<array>,
     *     action: string|null,
     *     controller: string|null,
     *     params: array,
     *     route: string,
     *     router: RouteStackInterface|MvcRouter\RouteStackInterface|null,
     *     route_match: RouteMatch,
     *     ...
     * }]]></code>
    </LessSpecificImplementedReturnType>
    <MixedInferredReturnType>
      <code>Mvc</code>
      <code>Mvc</code>
      <code>bool</code>
      <code>string</code>
    </MixedInferredReturnType>
    <PossiblyNullPropertyAssignmentValue>
      <code>$action</code>
      <code>$controller</code>
      <code>$query</code>
      <code>$route</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code>$action</code>
      <code>$controller</code>
      <code>$hrefCache</code>
      <code>$query</code>
      <code>$route</code>
      <code>$routeMatch</code>
      <code>$router</code>
      <code>Mvc</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $useRouteMatch</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>null !== $action</code>
      <code>null !== $route</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass>
      <code>MvcRouter\RouteMatch</code>
      <code>MvcRouter\RouteStackInterface</code>
    </UndefinedClass>
    <UndefinedDocblockClass>
      <code>RouteMatch|MvcRouter\RouteMatch</code>
      <code>RouteStackInterface|MvcRouter\RouteStackInterface</code>
      <code><![CDATA[array{
     *     label: string|null,
     *     fragment: string|null,
     *     id: string|null,
     *     class: string|null,
     *     title: string|null,
     *     target: string|null,
     *     rel: array|null,
     *     rev: array|null,
     *     order: int|null,
     *     resource: ResourceInterface|string|null,
     *     privilege: string|null,
     *     permission: mixed|null,
     *     active: bool,
     *     visible: bool,
     *     pages: list<array>,
     *     action: string|null,
     *     controller: string|null,
     *     params: array,
     *     route: string,
     *     router: RouteStackInterface|MvcRouter\RouteStackInterface|null,
     *     route_match: RouteMatch,
     *     ...
     * }]]></code>
      <code>null|RouteStackInterface|MvcRouter\RouteStackInterface</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Page/Uri.php">
    <DocblockTypeContradiction>
      <code><![CDATA[null !== $uri && ! is_string($uri)]]></code>
    </DocblockTypeContradiction>
    <ImplicitToStringCast>
      <code>$request</code>
    </ImplicitToStringCast>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <InvalidReturnStatement>
      <code><![CDATA[$this->request]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>Request</code>
    </InvalidReturnType>
    <LessSpecificImplementedReturnType>
      <code><![CDATA[array{
     *     label: string|null,
     *     fragment: string|null,
     *     id: string|null,
     *     class: string|null,
     *     title: string|null,
     *     target: string|null,
     *     rel: array|null,
     *     rev: array|null,
     *     order: int|null,
     *     resource: ResourceInterface|string|null,
     *     privilege: string|null,
     *     permission: mixed|null,
     *     active: bool,
     *     visible: bool,
     *     pages: list<array>,
     *     uri: string|null,
     *     ...
     * }]]></code>
    </LessSpecificImplementedReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->uri]]></code>
    </NullableReturnStatement>
    <PossiblyNullPropertyAssignmentValue>
      <code>$request</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code>$request</code>
      <code>Uri</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code>null !== $uri</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Service/AbstractNavigationFactory.php">
    <DeprecatedInterface>
      <code>AbstractNavigationFactory</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code><![CDATA[null === $this->pages]]></code>
    </DocblockTypeContradiction>
    <MissingConstructor>
      <code>$pages</code>
      <code>$pages</code>
    </MissingConstructor>
    <MixedArgument>
      <code><![CDATA[$configuration['navigation'][$this->getName()]]]></code>
      <code><![CDATA[$page['pages']]]></code>
      <code>$routeMatch</code>
      <code>$router</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$configuration['navigation']]]></code>
      <code><![CDATA[$configuration['navigation'][$this->getName()]]]></code>
      <code><![CDATA[$page['pages']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$page['pages']]]></code>
      <code><![CDATA[$page['request']]]></code>
      <code><![CDATA[$page['routeMatch']]]></code>
      <code><![CDATA[$page['router']]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$application</code>
      <code>$configuration</code>
      <code>$page</code>
      <code>$request</code>
      <code>$routeMatch</code>
      <code>$router</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getRequest</code>
      <code>getRouteMatch</code>
      <code>getRouter</code>
    </MixedMethodCall>
    <ParamNameMismatch>
      <code>$container</code>
    </ParamNameMismatch>
    <PossiblyInvalidArgument>
      <code>$pages</code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code>$pages</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Service/ConstructedNavigationFactory.php">
    <DeprecatedInterface>
      <code>ConstructedNavigationFactory</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code><![CDATA[null === $this->pages]]></code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>array|null|Config</code>
    </ImplementedReturnTypeMismatch>
    <PossiblyNullArgument>
      <code><![CDATA[$this->getPagesFromConfig($this->config)]]></code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor>
      <code>ConstructedNavigationFactory</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Service/DefaultNavigationFactory.php">
    <DeprecatedInterface>
      <code>DefaultNavigationFactory</code>
    </DeprecatedInterface>
  </file>
  <file src="src/Service/NavigationAbstractServiceFactory.php">
    <DeprecatedInterface>
      <code>NavigationAbstractServiceFactory</code>
    </DeprecatedInterface>
    <MissingConstructor>
      <code>$config</code>
    </MissingConstructor>
    <MissingParamType>
      <code>$requestedName</code>
    </MissingParamType>
    <MixedArgument>
      <code>$requestedName</code>
      <code>$requestedName</code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$this->config]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$config[$withoutPrefix]</code>
      <code>$config[strtolower($withoutPrefix)]</code>
      <code><![CDATA[$this->config]]></code>
      <code><![CDATA[$this->config]]></code>
    </MixedReturnStatement>
    <ParamNameMismatch>
      <code>$container</code>
      <code>$container</code>
    </ParamNameMismatch>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->config !== null]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/View/HelperConfig.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$config['navigation_helpers']]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>Config</code>
      <code>new Config($config)</code>
      <code>parent::configureServiceManager($serviceManager)</code>
    </DeprecatedClass>
    <DeprecatedInterface>
      <code>HelperConfig</code>
    </DeprecatedInterface>
    <DeprecatedMethod>
      <code>getServiceLocator</code>
    </DeprecatedMethod>
    <LessSpecificReturnStatement>
      <code><![CDATA[$container->getServiceLocator() ?: $container]]></code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code>$container</code>
      <code>$name</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$class</code>
      <code>$pluginManager</code>
      <code>$services</code>
      <code><![CDATA[$services->get('config')]]></code>
      <code><![CDATA[$this->config[$type]]]></code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$config['aliases'][$name]]]></code>
      <code><![CDATA[$config['factories'][$class]]]></code>
      <code><![CDATA[$config['factories'][$this->normalizeNameForV2($class)]]]></code>
      <code><![CDATA[$this->config['delegators']['laminasviewhelpernavigation']]]></code>
      <code><![CDATA[$this->config['delegators'][NavigationHelper::class]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code><![CDATA[$config['factories'][$class]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$class</code>
      <code><![CDATA[$config['aliases'][$name]]]></code>
      <code>$pluginManager</code>
      <code>$services</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>ServiceManager</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getPluginManager</code>
    </MixedMethodCall>
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$this->config]]></code>
      <code><![CDATA[$this->config]]></code>
    </MixedPropertyTypeCoercion>
    <MixedReturnStatement>
      <code><![CDATA[$r->getValue($container) ?: $container]]></code>
      <code><![CDATA[$r->getValue($container) ?: $container]]></code>
    </MixedReturnStatement>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$container->getServiceLocator()]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/View/NavigationHelperFactory.php">
    <DeprecatedInterface>
      <code>NavigationHelperFactory</code>
    </DeprecatedInterface>
    <MixedInferredReturnType>
      <code>ContainerInterface</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$r->getValue($container) ?: $container]]></code>
      <code><![CDATA[$r->getValue($container) ?: $container]]></code>
    </MixedReturnStatement>
    <ParamNameMismatch>
      <code>$container</code>
    </ParamNameMismatch>
  </file>
  <file src="src/View/ViewHelperManagerDelegatorFactory.php">
    <DeprecatedInterface>
      <code>ViewHelperManagerDelegatorFactory</code>
    </DeprecatedInterface>
    <LessSpecificReturnStatement>
      <code>$viewHelpers</code>
    </LessSpecificReturnStatement>
    <MissingParamType>
      <code>$callback</code>
      <code>$name</code>
      <code>$name</code>
      <code>$requestedName</code>
    </MissingParamType>
    <MixedArgument>
      <code>$callback</code>
      <code>$viewHelpers</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$viewHelpers</code>
    </MixedAssignment>
    <MoreSpecificReturnType>
      <code>HelperPluginManager</code>
    </MoreSpecificReturnType>
    <ParamNameMismatch>
      <code>$container</code>
    </ParamNameMismatch>
  </file>
  <file src="test/ContainerTest.php">
    <InvalidArgument>
      <code>$pages = new stdClass()</code>
      <code><![CDATA['ok']]></code>
      <code><![CDATA['this is a string']]></code>
      <code>1337</code>
      <code>new stdClass()</code>
    </InvalidArgument>
    <InvalidCatch>
      <code><![CDATA[try {
            $nav = new Navigation\Navigation(new stdClass());
            $this->fail('An invalid argument was given to the constructor, '
                        . 'but a Laminas\Navigation\Exception\InvalidArgumentException was '
                        . 'not thrown');
        } catch (Navigation\Exception\ExceptionInterface $e) {
            $this->assertStringContainsString('Invalid argument: $pages', $e->getMessage());
        }]]></code>
    </InvalidCatch>
    <MissingReturnType>
      <code>_getFindByNavigation</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code><![CDATA[$this->_getFindByNavigation()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$actual[]</code>
      <code>$actual[]</code>
      <code>$actual[]</code>
      <code>$actual[]</code>
      <code>$actual[]</code>
      <code>$actual[]</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$found</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$page</code>
      <code>$page</code>
      <code>$page</code>
      <code>$page</code>
      <code>$page</code>
      <code>$page</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>addPage</code>
      <code>addPage</code>
      <code>addPage</code>
      <code>findAllBy</code>
      <code>findAllBy</code>
      <code>findAllBy</code>
      <code>findAllByAction</code>
      <code>findAllById</code>
      <code>findAllByaction</code>
      <code>findBy</code>
      <code>findById</code>
      <code>findOneBy</code>
      <code>findOneBy</code>
      <code>findOneBy</code>
      <code>findOneBy</code>
      <code>findOneById</code>
      <code>findOneBypage2</code>
      <code>findSomeById</code>
      <code>getLabel</code>
      <code>getLabel</code>
      <code>getLabel</code>
      <code>getLabel</code>
      <code>getLabel</code>
      <code>getLabel</code>
      <code>getPagez</code>
      <code>toArray</code>
    </MixedMethodCall>
    <PossiblyNullArgument>
      <code><![CDATA[$container->findOneBy('route', 'bar')]]></code>
      <code><![CDATA[$container->findOneBy('route', 'baz')]]></code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>getLabel</code>
      <code>hasChildren</code>
      <code>hasChildren</code>
    </PossiblyNullReference>
    <TooManyArguments>
      <code><![CDATA[new AbstractContainer([
            [
                'label' => 'Page 2',
                'type'  => 'uri',
            ],
            [
                'label' => 'Page 1',
                'type'  => 'uri',
                'order' => -1,
            ],
        ])]]></code>
    </TooManyArguments>
    <UnusedVariable>
      <code>$found</code>
      <code>$found</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$nav</code>
      <code>$page</code>
    </UnusedVariable>
  </file>
  <file src="test/NavigationTest.php">
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Page/MvcTest.php">
    <InvalidArgument>
      <code>$newRouter</code>
      <code>$router</code>
      <code>$router</code>
      <code>$router</code>
      <code>$router</code>
      <code>$router</code>
      <code>$router</code>
      <code>$router</code>
      <code>TreeRouteStack::class</code>
    </InvalidArgument>
    <MixedArgument>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
    </MixedArgument>
    <MixedMethodCall>
      <code>addRoute</code>
      <code>addRoute</code>
      <code>setMatchedRouteName</code>
      <code>setMatchedRouteName</code>
    </MixedMethodCall>
    <NullArgument>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </NullArgument>
    <PossiblyInvalidCast>
      <code>$invalid</code>
      <code>$invalid</code>
    </PossiblyInvalidCast>
    <PossiblyNullArgument>
      <code><![CDATA[$event->getRouteMatch()]]></code>
      <code><![CDATA[$event->getRouteMatch()]]></code>
      <code><![CDATA[$event->getRouteMatch()]]></code>
      <code><![CDATA[$event->getRouteMatch()]]></code>
      <code><![CDATA[$event->getRouteMatch()]]></code>
    </PossiblyNullArgument>
    <UndefinedThisPropertyAssignment>
      <code><![CDATA[$this->route]]></code>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->router]]></code>
    </UndefinedThisPropertyAssignment>
    <UndefinedThisPropertyFetch>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->routeMatch]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
      <code><![CDATA[$this->router]]></code>
    </UndefinedThisPropertyFetch>
  </file>
  <file src="test/Page/PageFactoryTest.php">
    <InvalidArgument>
      <code><![CDATA['']]></code>
    </InvalidArgument>
    <MissingClosureParamType>
      <code>$page</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$page</code>
    </MixedArgument>
    <PossiblyInvalidArgument>
      <code>$page</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="test/Page/PageTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['stdClass']]></code>
    </ArgumentTypeCoercion>
    <DuplicateArrayKey>
      <code><![CDATA['label'      => 'foo.bar']]></code>
    </DuplicateArrayKey>
    <InvalidArgument>
      <code>$invalid</code>
      <code>$invalid</code>
      <code>$invalid</code>
      <code>$invalid</code>
      <code>$invalid</code>
      <code>$invalid</code>
      <code>$invalid</code>
      <code><![CDATA['False']]></code>
      <code><![CDATA['alternate']]></code>
      <code><![CDATA['alternate']]></code>
      <code><![CDATA['true']]></code>
      <code>0</code>
      <code>0</code>
      <code>0</code>
      <code>1</code>
      <code>1</code>
      <code>[]</code>
      <code>[]</code>
      <code>[]</code>
      <code>[]</code>
      <code>new stdClass()</code>
    </InvalidArgument>
    <InvalidCast>
      <code>[]</code>
      <code>[]</code>
    </InvalidCast>
    <MixedArgument>
      <code><![CDATA[$page->getPermission()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$childPage</code>
      <code>$childPage</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getVisible</code>
      <code>getVisible</code>
      <code>isVisible</code>
      <code>isVisible</code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$page->getPermission()->name]]></code>
    </MixedPropertyFetch>
    <PossiblyInvalidCast>
      <code>$invalid</code>
      <code>$invalid</code>
    </PossiblyInvalidCast>
    <PossiblyNullArgument>
      <code><![CDATA[$page->getPermission()]]></code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$page->getPermission()->name]]></code>
    </PossiblyNullPropertyFetch>
  </file>
  <file src="test/Service/AbstractNavigationFactoryTest.php">
    <InvalidArgument>
      <code>new Router\Http\TreeRouteStack()</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testCanCreateNavigationInstanceV2</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$this->factory]]></code>
      <code><![CDATA[$this->factory]]></code>
    </MixedArgument>
    <UndefinedThisPropertyAssignment>
      <code><![CDATA[$this->factory]]></code>
    </UndefinedThisPropertyAssignment>
    <UndefinedThisPropertyFetch>
      <code><![CDATA[$this->factory]]></code>
    </UndefinedThisPropertyFetch>
  </file>
  <file src="test/Service/TestAsset/TestNavigationFactory.php">
    <DeprecatedInterface>
      <code>TestNavigationFactory</code>
    </DeprecatedInterface>
    <PropertyNotSetInConstructor>
      <code>TestNavigationFactory</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/ServiceFactoryTest.php">
    <DeprecatedMethod>
      <code>setMethods</code>
    </DeprecatedMethod>
    <InvalidFunctionCall>
      <code><![CDATA[$factory($services, 'Navigation')]]></code>
    </InvalidFunctionCall>
    <MissingClosureParamType>
      <code>$pages</code>
      <code>$pages</code>
      <code>$that</code>
      <code>$that</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[function ($that, $pages) use (&$recursive) {]]></code>
      <code><![CDATA[function ($that, $pages) use (&$recursive) {]]></code>
    </MissingClosureReturnType>
    <MixedAssignment>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$page</code>
      <code>$page</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
      <code>count</code>
      <code>count</code>
      <code>count</code>
      <code>count</code>
      <code>getPages</code>
      <code>getPages</code>
      <code>getPages</code>
      <code>getPages</code>
    </MixedMethodCall>
    <UndefinedThisPropertyAssignment>
      <code><![CDATA[$this->mvcEvent]]></code>
      <code><![CDATA[$this->request]]></code>
      <code><![CDATA[$this->router]]></code>
    </UndefinedThisPropertyAssignment>
  </file>
  <file src="test/TestAsset/AbstractContainer.php">
    <InvalidReturnType>
      <code>addPage</code>
    </InvalidReturnType>
  </file>
  <file src="test/TestAsset/FileNavigationFactory.php">
    <DeprecatedInterface>
      <code>FileNavigationFactory</code>
    </DeprecatedInterface>
  </file>
  <file src="test/TestAsset/Page.php">
    <PropertyNotSetInConstructor>
      <code>Page</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/TestAsset/RecursiveIteratorIterator.php">
    <NullReference>
      <code>getLabel</code>
    </NullReference>
  </file>
  <file src="test/TestAsset/Router.php">
    <PropertyNotSetInConstructor>
      <code>Router</code>
      <code>Router</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/View/HelperConfigTest.php">
    <MissingClosureParamType>
      <code>$services</code>
    </MissingClosureParamType>
    <MissingReturnType>
      <code>testConfigureServiceManagerWithConfig</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$helpers</code>
      <code>$services</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$helpers</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>findHelper</code>
    </MixedMethodCall>
  </file>
  <file src="test/View/ViewHelperManagerDelegatorFactoryTest.php">
    <MissingClosureReturnType>
      <code>function () use ($helpers) {</code>
    </MissingClosureReturnType>
  </file>
</files>
